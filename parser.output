Grammar

    0 $accept: function $end

    1 function: function_header optional_variable body

    2 function_header: FUNCTION IDENTIFIER parameters RETURNS type ';'
    3                | error ';'

    4 optional_variable: optional_variable variable
    5                  | error ';'
    6                  | %empty

    7 variable: IDENTIFIER ':' type IS statement_

    8 parameters: parameters ',' parameter
    9           | parameter
   10           | %empty

   11 parameter: IDENTIFIER ':' type

   12 type: INTEGER
   13     | REAL
   14     | BOOLEAN

   15 body: BEGIN_ statement_ END ';'

   16 statement_: statement ';'
   17           | error ';'

   18 statement: expression
   19          | REDUCE operator reductions ENDREDUCE
   20          | IF expression THEN statement_ ELSE statement_ ENDIF
   21          | CASE expression IS cases OTHERS ARROW statement_ ENDCASE

   22 cases: cases case
   23      | %empty

   24 case: WHEN INT_LITERAL ARROW statement ';'

   25 operator: ADDOP
   26         | MULOP
   27         | REMOP
   28         | EXPOP
   29         | RELOP

   30 reductions: reductions statement_
   31           | %empty

   32 expression: expression OROP binary_logic
   33           | binary_logic

   34 binary_logic: binary_logic ANDOP unary_logic
   35             | unary_logic

   36 unary_logic: NOTOP unary_logic
   37            | relation

   38 relation: relation RELOP term
   39         | term

   40 term: term ADDOP factor
   41     | factor

   42 factor: factor MULOP exp
   43       | factor REMOP exp
   44       | exp

   45 exp: primary
   46    | primary EXPOP exp

   47 primary: '(' expression ')'
   48        | INT_LITERAL
   49        | REAL_LITERAL
   50        | BOOL_LITERAL
   51        | IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
'(' (40) 47
')' (41) 47
',' (44) 8
':' (58) 7 11
';' (59) 2 3 5 15 16 17 24
error (256) 3 5 17
IDENTIFIER (258) 2 7 11 51
INT_LITERAL (259) 24 48
REAL_LITERAL (260) 49
BOOL_LITERAL (261) 50
ADDOP (262) 25 40
MULOP (263) 26 42
RELOP (264) 29 38
EXPOP (265) 28 46
REMOP (266) 27 43
ANDOP (267) 34
OROP (268) 32
NOTOP (269) 36
ARROW (270) 21 24
BEGIN_ (271) 15
BOOLEAN (272) 14
END (273) 15
ENDREDUCE (274) 19
FUNCTION (275) 2
INTEGER (276) 12
IS (277) 7 21
REDUCE (278) 19
RETURNS (279) 2
REAL (280) 13
IF (281) 20
ENDIF (282) 20
ELSE (283) 20
THEN (284) 20
CASE (285) 21
ENDCASE (286) 21
WHEN (287) 24
OTHERS (288) 21


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
function (40)
    on left: 1, on right: 0
function_header (41)
    on left: 2 3, on right: 1
optional_variable (42)
    on left: 4 5 6, on right: 1 4
variable (43)
    on left: 7, on right: 4
parameters (44)
    on left: 8 9 10, on right: 2 8
parameter (45)
    on left: 11, on right: 8 9
type (46)
    on left: 12 13 14, on right: 2 7 11
body (47)
    on left: 15, on right: 1
statement_ (48)
    on left: 16 17, on right: 7 15 20 21 30
statement (49)
    on left: 18 19 20 21, on right: 16 24
cases (50)
    on left: 22 23, on right: 21 22
case (51)
    on left: 24, on right: 22
operator (52)
    on left: 25 26 27 28 29, on right: 19
reductions (53)
    on left: 30 31, on right: 19 30
expression (54)
    on left: 32 33, on right: 18 20 21 32 47
binary_logic (55)
    on left: 34 35, on right: 32 33 34
unary_logic (56)
    on left: 36 37, on right: 34 35 36
relation (57)
    on left: 38 39, on right: 37 38
term (58)
    on left: 40 41, on right: 38 39 40
factor (59)
    on left: 42 43 44, on right: 40 41 42 43
exp (60)
    on left: 45 46, on right: 42 43 44 46
primary (61)
    on left: 47 48 49 50 51, on right: 45 46


State 0

    0 $accept: . function $end

    error     shift, and go to state 1
    FUNCTION  shift, and go to state 2

    function         go to state 3
    function_header  go to state 4


State 1

    3 function_header: error . ';'

    ';'  shift, and go to state 5


State 2

    2 function_header: FUNCTION . IDENTIFIER parameters RETURNS type ';'

    IDENTIFIER  shift, and go to state 6


State 3

    0 $accept: function . $end

    $end  shift, and go to state 7


State 4

    1 function: function_header . optional_variable body

    error  shift, and go to state 8

    IDENTIFIER  reduce using rule 6 (optional_variable)
    BEGIN_      reduce using rule 6 (optional_variable)

    optional_variable  go to state 9


State 5

    3 function_header: error ';' .

    $default  reduce using rule 3 (function_header)


State 6

    2 function_header: FUNCTION IDENTIFIER . parameters RETURNS type ';'

    IDENTIFIER  shift, and go to state 10

    $default  reduce using rule 10 (parameters)

    parameters  go to state 11
    parameter   go to state 12


State 7

    0 $accept: function $end .

    $default  accept


State 8

    5 optional_variable: error . ';'

    ';'  shift, and go to state 13


State 9

    1 function: function_header optional_variable . body
    4 optional_variable: optional_variable . variable

    IDENTIFIER  shift, and go to state 14
    BEGIN_      shift, and go to state 15

    variable  go to state 16
    body      go to state 17


State 10

   11 parameter: IDENTIFIER . ':' type

    ':'  shift, and go to state 18


State 11

    2 function_header: FUNCTION IDENTIFIER parameters . RETURNS type ';'
    8 parameters: parameters . ',' parameter

    RETURNS  shift, and go to state 19
    ','      shift, and go to state 20


State 12

    9 parameters: parameter .

    $default  reduce using rule 9 (parameters)


State 13

    5 optional_variable: error ';' .

    $default  reduce using rule 5 (optional_variable)


State 14

    7 variable: IDENTIFIER . ':' type IS statement_

    ':'  shift, and go to state 21


State 15

   15 body: BEGIN_ . statement_ END ';'

    error         shift, and go to state 22
    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    NOTOP         shift, and go to state 27
    REDUCE        shift, and go to state 28
    IF            shift, and go to state 29
    CASE          shift, and go to state 30
    '('           shift, and go to state 31

    statement_    go to state 32
    statement     go to state 33
    expression    go to state 34
    binary_logic  go to state 35
    unary_logic   go to state 36
    relation      go to state 37
    term          go to state 38
    factor        go to state 39
    exp           go to state 40
    primary       go to state 41


State 16

    4 optional_variable: optional_variable variable .

    $default  reduce using rule 4 (optional_variable)


State 17

    1 function: function_header optional_variable body .

    $default  reduce using rule 1 (function)


State 18

   11 parameter: IDENTIFIER ':' . type

    BOOLEAN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    REAL     shift, and go to state 44

    type  go to state 45


State 19

    2 function_header: FUNCTION IDENTIFIER parameters RETURNS . type ';'

    BOOLEAN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    REAL     shift, and go to state 44

    type  go to state 46


State 20

    8 parameters: parameters ',' . parameter

    IDENTIFIER  shift, and go to state 10

    parameter  go to state 47


State 21

    7 variable: IDENTIFIER ':' . type IS statement_

    BOOLEAN  shift, and go to state 42
    INTEGER  shift, and go to state 43
    REAL     shift, and go to state 44

    type  go to state 48


State 22

   17 statement_: error . ';'

    ';'  shift, and go to state 49


State 23

   51 primary: IDENTIFIER .

    $default  reduce using rule 51 (primary)


State 24

   48 primary: INT_LITERAL .

    $default  reduce using rule 48 (primary)


State 25

   49 primary: REAL_LITERAL .

    $default  reduce using rule 49 (primary)


State 26

   50 primary: BOOL_LITERAL .

    $default  reduce using rule 50 (primary)


State 27

   36 unary_logic: NOTOP . unary_logic

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    NOTOP         shift, and go to state 27
    '('           shift, and go to state 31

    unary_logic  go to state 50
    relation     go to state 37
    term         go to state 38
    factor       go to state 39
    exp          go to state 40
    primary      go to state 41


State 28

   19 statement: REDUCE . operator reductions ENDREDUCE

    ADDOP  shift, and go to state 51
    MULOP  shift, and go to state 52
    RELOP  shift, and go to state 53
    EXPOP  shift, and go to state 54
    REMOP  shift, and go to state 55

    operator  go to state 56


State 29

   20 statement: IF . expression THEN statement_ ELSE statement_ ENDIF

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    NOTOP         shift, and go to state 27
    '('           shift, and go to state 31

    expression    go to state 57
    binary_logic  go to state 35
    unary_logic   go to state 36
    relation      go to state 37
    term          go to state 38
    factor        go to state 39
    exp           go to state 40
    primary       go to state 41


State 30

   21 statement: CASE . expression IS cases OTHERS ARROW statement_ ENDCASE

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    NOTOP         shift, and go to state 27
    '('           shift, and go to state 31

    expression    go to state 58
    binary_logic  go to state 35
    unary_logic   go to state 36
    relation      go to state 37
    term          go to state 38
    factor        go to state 39
    exp           go to state 40
    primary       go to state 41


State 31

   47 primary: '(' . expression ')'

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    NOTOP         shift, and go to state 27
    '('           shift, and go to state 31

    expression    go to state 59
    binary_logic  go to state 35
    unary_logic   go to state 36
    relation      go to state 37
    term          go to state 38
    factor        go to state 39
    exp           go to state 40
    primary       go to state 41


State 32

   15 body: BEGIN_ statement_ . END ';'

    END  shift, and go to state 60


State 33

   16 statement_: statement . ';'

    ';'  shift, and go to state 61


State 34

   18 statement: expression .
   32 expression: expression . OROP binary_logic

    OROP  shift, and go to state 62

    $default  reduce using rule 18 (statement)


State 35

   33 expression: binary_logic .
   34 binary_logic: binary_logic . ANDOP unary_logic

    ANDOP  shift, and go to state 63

    $default  reduce using rule 33 (expression)


State 36

   35 binary_logic: unary_logic .

    $default  reduce using rule 35 (binary_logic)


State 37

   37 unary_logic: relation .
   38 relation: relation . RELOP term

    RELOP  shift, and go to state 64

    $default  reduce using rule 37 (unary_logic)


State 38

   39 relation: term .
   40 term: term . ADDOP factor

    ADDOP  shift, and go to state 65

    $default  reduce using rule 39 (relation)


State 39

   41 term: factor .
   42 factor: factor . MULOP exp
   43       | factor . REMOP exp

    MULOP  shift, and go to state 66
    REMOP  shift, and go to state 67

    $default  reduce using rule 41 (term)


State 40

   44 factor: exp .

    $default  reduce using rule 44 (factor)


State 41

   45 exp: primary .
   46    | primary . EXPOP exp

    EXPOP  shift, and go to state 68

    $default  reduce using rule 45 (exp)


State 42

   14 type: BOOLEAN .

    $default  reduce using rule 14 (type)


State 43

   12 type: INTEGER .

    $default  reduce using rule 12 (type)


State 44

   13 type: REAL .

    $default  reduce using rule 13 (type)


State 45

   11 parameter: IDENTIFIER ':' type .

    $default  reduce using rule 11 (parameter)


State 46

    2 function_header: FUNCTION IDENTIFIER parameters RETURNS type . ';'

    ';'  shift, and go to state 69


State 47

    8 parameters: parameters ',' parameter .

    $default  reduce using rule 8 (parameters)


State 48

    7 variable: IDENTIFIER ':' type . IS statement_

    IS  shift, and go to state 70


State 49

   17 statement_: error ';' .

    $default  reduce using rule 17 (statement_)


State 50

   36 unary_logic: NOTOP unary_logic .

    $default  reduce using rule 36 (unary_logic)


State 51

   25 operator: ADDOP .

    $default  reduce using rule 25 (operator)


State 52

   26 operator: MULOP .

    $default  reduce using rule 26 (operator)


State 53

   29 operator: RELOP .

    $default  reduce using rule 29 (operator)


State 54

   28 operator: EXPOP .

    $default  reduce using rule 28 (operator)


State 55

   27 operator: REMOP .

    $default  reduce using rule 27 (operator)


State 56

   19 statement: REDUCE operator . reductions ENDREDUCE

    $default  reduce using rule 31 (reductions)

    reductions  go to state 71


State 57

   20 statement: IF expression . THEN statement_ ELSE statement_ ENDIF
   32 expression: expression . OROP binary_logic

    OROP  shift, and go to state 62
    THEN  shift, and go to state 72


State 58

   21 statement: CASE expression . IS cases OTHERS ARROW statement_ ENDCASE
   32 expression: expression . OROP binary_logic

    OROP  shift, and go to state 62
    IS    shift, and go to state 73


State 59

   32 expression: expression . OROP binary_logic
   47 primary: '(' expression . ')'

    OROP  shift, and go to state 62
    ')'   shift, and go to state 74


State 60

   15 body: BEGIN_ statement_ END . ';'

    ';'  shift, and go to state 75


State 61

   16 statement_: statement ';' .

    $default  reduce using rule 16 (statement_)


State 62

   32 expression: expression OROP . binary_logic

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    NOTOP         shift, and go to state 27
    '('           shift, and go to state 31

    binary_logic  go to state 76
    unary_logic   go to state 36
    relation      go to state 37
    term          go to state 38
    factor        go to state 39
    exp           go to state 40
    primary       go to state 41


State 63

   34 binary_logic: binary_logic ANDOP . unary_logic

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    NOTOP         shift, and go to state 27
    '('           shift, and go to state 31

    unary_logic  go to state 77
    relation     go to state 37
    term         go to state 38
    factor       go to state 39
    exp          go to state 40
    primary      go to state 41


State 64

   38 relation: relation RELOP . term

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    '('           shift, and go to state 31

    term     go to state 78
    factor   go to state 39
    exp      go to state 40
    primary  go to state 41


State 65

   40 term: term ADDOP . factor

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    '('           shift, and go to state 31

    factor   go to state 79
    exp      go to state 40
    primary  go to state 41


State 66

   42 factor: factor MULOP . exp

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    '('           shift, and go to state 31

    exp      go to state 80
    primary  go to state 41


State 67

   43 factor: factor REMOP . exp

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    '('           shift, and go to state 31

    exp      go to state 81
    primary  go to state 41


State 68

   46 exp: primary EXPOP . exp

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    '('           shift, and go to state 31

    exp      go to state 82
    primary  go to state 41


State 69

    2 function_header: FUNCTION IDENTIFIER parameters RETURNS type ';' .

    $default  reduce using rule 2 (function_header)


State 70

    7 variable: IDENTIFIER ':' type IS . statement_

    error         shift, and go to state 22
    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    NOTOP         shift, and go to state 27
    REDUCE        shift, and go to state 28
    IF            shift, and go to state 29
    CASE          shift, and go to state 30
    '('           shift, and go to state 31

    statement_    go to state 83
    statement     go to state 33
    expression    go to state 34
    binary_logic  go to state 35
    unary_logic   go to state 36
    relation      go to state 37
    term          go to state 38
    factor        go to state 39
    exp           go to state 40
    primary       go to state 41


State 71

   19 statement: REDUCE operator reductions . ENDREDUCE
   30 reductions: reductions . statement_

    error         shift, and go to state 22
    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    NOTOP         shift, and go to state 27
    ENDREDUCE     shift, and go to state 84
    REDUCE        shift, and go to state 28
    IF            shift, and go to state 29
    CASE          shift, and go to state 30
    '('           shift, and go to state 31

    statement_    go to state 85
    statement     go to state 33
    expression    go to state 34
    binary_logic  go to state 35
    unary_logic   go to state 36
    relation      go to state 37
    term          go to state 38
    factor        go to state 39
    exp           go to state 40
    primary       go to state 41


State 72

   20 statement: IF expression THEN . statement_ ELSE statement_ ENDIF

    error         shift, and go to state 22
    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    NOTOP         shift, and go to state 27
    REDUCE        shift, and go to state 28
    IF            shift, and go to state 29
    CASE          shift, and go to state 30
    '('           shift, and go to state 31

    statement_    go to state 86
    statement     go to state 33
    expression    go to state 34
    binary_logic  go to state 35
    unary_logic   go to state 36
    relation      go to state 37
    term          go to state 38
    factor        go to state 39
    exp           go to state 40
    primary       go to state 41


State 73

   21 statement: CASE expression IS . cases OTHERS ARROW statement_ ENDCASE

    $default  reduce using rule 23 (cases)

    cases  go to state 87


State 74

   47 primary: '(' expression ')' .

    $default  reduce using rule 47 (primary)


State 75

   15 body: BEGIN_ statement_ END ';' .

    $default  reduce using rule 15 (body)


State 76

   32 expression: expression OROP binary_logic .
   34 binary_logic: binary_logic . ANDOP unary_logic

    ANDOP  shift, and go to state 63

    $default  reduce using rule 32 (expression)


State 77

   34 binary_logic: binary_logic ANDOP unary_logic .

    $default  reduce using rule 34 (binary_logic)


State 78

   38 relation: relation RELOP term .
   40 term: term . ADDOP factor

    ADDOP  shift, and go to state 65

    $default  reduce using rule 38 (relation)


State 79

   40 term: term ADDOP factor .
   42 factor: factor . MULOP exp
   43       | factor . REMOP exp

    MULOP  shift, and go to state 66
    REMOP  shift, and go to state 67

    $default  reduce using rule 40 (term)


State 80

   42 factor: factor MULOP exp .

    $default  reduce using rule 42 (factor)


State 81

   43 factor: factor REMOP exp .

    $default  reduce using rule 43 (factor)


State 82

   46 exp: primary EXPOP exp .

    $default  reduce using rule 46 (exp)


State 83

    7 variable: IDENTIFIER ':' type IS statement_ .

    $default  reduce using rule 7 (variable)


State 84

   19 statement: REDUCE operator reductions ENDREDUCE .

    $default  reduce using rule 19 (statement)


State 85

   30 reductions: reductions statement_ .

    $default  reduce using rule 30 (reductions)


State 86

   20 statement: IF expression THEN statement_ . ELSE statement_ ENDIF

    ELSE  shift, and go to state 88


State 87

   21 statement: CASE expression IS cases . OTHERS ARROW statement_ ENDCASE
   22 cases: cases . case

    WHEN    shift, and go to state 89
    OTHERS  shift, and go to state 90

    case  go to state 91


State 88

   20 statement: IF expression THEN statement_ ELSE . statement_ ENDIF

    error         shift, and go to state 22
    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    NOTOP         shift, and go to state 27
    REDUCE        shift, and go to state 28
    IF            shift, and go to state 29
    CASE          shift, and go to state 30
    '('           shift, and go to state 31

    statement_    go to state 92
    statement     go to state 33
    expression    go to state 34
    binary_logic  go to state 35
    unary_logic   go to state 36
    relation      go to state 37
    term          go to state 38
    factor        go to state 39
    exp           go to state 40
    primary       go to state 41


State 89

   24 case: WHEN . INT_LITERAL ARROW statement ';'

    INT_LITERAL  shift, and go to state 93


State 90

   21 statement: CASE expression IS cases OTHERS . ARROW statement_ ENDCASE

    ARROW  shift, and go to state 94


State 91

   22 cases: cases case .

    $default  reduce using rule 22 (cases)


State 92

   20 statement: IF expression THEN statement_ ELSE statement_ . ENDIF

    ENDIF  shift, and go to state 95


State 93

   24 case: WHEN INT_LITERAL . ARROW statement ';'

    ARROW  shift, and go to state 96


State 94

   21 statement: CASE expression IS cases OTHERS ARROW . statement_ ENDCASE

    error         shift, and go to state 22
    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    NOTOP         shift, and go to state 27
    REDUCE        shift, and go to state 28
    IF            shift, and go to state 29
    CASE          shift, and go to state 30
    '('           shift, and go to state 31

    statement_    go to state 97
    statement     go to state 33
    expression    go to state 34
    binary_logic  go to state 35
    unary_logic   go to state 36
    relation      go to state 37
    term          go to state 38
    factor        go to state 39
    exp           go to state 40
    primary       go to state 41


State 95

   20 statement: IF expression THEN statement_ ELSE statement_ ENDIF .

    $default  reduce using rule 20 (statement)


State 96

   24 case: WHEN INT_LITERAL ARROW . statement ';'

    IDENTIFIER    shift, and go to state 23
    INT_LITERAL   shift, and go to state 24
    REAL_LITERAL  shift, and go to state 25
    BOOL_LITERAL  shift, and go to state 26
    NOTOP         shift, and go to state 27
    REDUCE        shift, and go to state 28
    IF            shift, and go to state 29
    CASE          shift, and go to state 30
    '('           shift, and go to state 31

    statement     go to state 98
    expression    go to state 34
    binary_logic  go to state 35
    unary_logic   go to state 36
    relation      go to state 37
    term          go to state 38
    factor        go to state 39
    exp           go to state 40
    primary       go to state 41


State 97

   21 statement: CASE expression IS cases OTHERS ARROW statement_ . ENDCASE

    ENDCASE  shift, and go to state 99


State 98

   24 case: WHEN INT_LITERAL ARROW statement . ';'

    ';'  shift, and go to state 100


State 99

   21 statement: CASE expression IS cases OTHERS ARROW statement_ ENDCASE .

    $default  reduce using rule 21 (statement)


State 100

   24 case: WHEN INT_LITERAL ARROW statement ';' .

    $default  reduce using rule 24 (case)
